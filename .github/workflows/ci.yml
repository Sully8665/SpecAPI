name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore src/SpecAPI/SpecAPI.csproj
      
    - name: Build project
      run: dotnet build src/SpecAPI/SpecAPI.csproj --no-restore --configuration Release
      
    - name: Run tests
      run: dotnet test src/SpecAPI/SpecAPI.csproj --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/coverage.cobertura.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Run integration tests
      run: |
        # Create a simple test file for integration testing
        echo "- name: 'Test GET Request'" > test-integration.yaml
        echo "  request:" >> test-integration.yaml
        echo "    method: 'GET'" >> test-integration.yaml
        echo "    url: 'https://httpbin.org/get'" >> test-integration.yaml
        echo "  expect:" >> test-integration.yaml
        echo "    statusCode: 200" >> test-integration.yaml
        
        # Run the integration test
        dotnet run --project src/SpecAPI/SpecAPI.csproj test-integration.yaml
        
    - name: Validate YAML syntax
      run: |
        # Validate example YAML files
        for file in Examples/*.yaml; do
          echo "Validating $file..."
          dotnet run --project src/SpecAPI/SpecAPI.csproj "$file" --validate-only
        done

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Install SonarCloud scanner
      uses: SonarSource/sonarcloud-github-action@master
      
    - name: Run SonarCloud analysis
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        dotnet tool install --global dotnet-sonarscanner
        dotnet sonarscanner begin /k:"specapi" /o:"specapi" /d:sonar.token="$SONAR_TOKEN" /d:sonar.host.url="https://sonarcloud.io"
        dotnet build src/SpecAPI/SpecAPI.csproj
        dotnet sonarscanner end /d:sonar.token="$SONAR_TOKEN"
        
    - name: Run security scan
      uses: snyk/actions/dotnet@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  package:
    name: Package Application
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Publish application
      run: |
        dotnet publish src/SpecAPI/SpecAPI.csproj -c Release -o ./publish --self-contained true -r linux-x64
        dotnet publish src/SpecAPI/SpecAPI.csproj -c Release -o ./publish-win --self-contained true -r win-x64
        dotnet publish src/SpecAPI/SpecAPI.csproj -c Release -o ./publish-osx --self-contained true -r osx-x64
        
    - name: Create release artifacts
      run: |
        # Create zip files for different platforms
        cd publish && zip -r ../specapi-linux-x64.zip . && cd ..
        cd publish-win && zip -r ../specapi-win-x64.zip . && cd ..
        cd publish-osx && zip -r ../specapi-osx-x64.zip . && cd ..
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: specapi-binaries
        path: |
          specapi-linux-x64.zip
          specapi-win-x64.zip
          specapi-osx-x64.zip
        retention-days: 30

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          specapi/specapi:latest
          specapi/specapi:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [package, docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: specapi-binaries
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.run_number }}
        name: Release v${{ github.run_number }}
        body: |
          ## What's Changed
          
          ### üöÄ New Features
          - Automated CI/CD pipeline
          - Docker containerization
          - Multi-platform builds
          
          ### üîß Improvements
          - Code quality analysis with SonarCloud
          - Security scanning with Snyk
          - Automated testing and validation
          
          ### üì¶ Downloads
          - Linux x64: `specapi-linux-x64.zip`
          - Windows x64: `specapi-win-x64.zip`
          - macOS x64: `specapi-osx-x64.zip`
          
          ### üê≥ Docker
          ```bash
          docker pull specapi/specapi:latest
          ```
        files: |
          specapi-linux-x64.zip
          specapi-win-x64.zip
          specapi-osx-x64.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 